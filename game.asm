##################################################################### 
# 
# CSCB58 Winter 2024 Assembly Final Project 
# University of Toronto Scarborough 
# 
# Student: Yiran Yu, 1008838180, yuyiran2, gogoyiran.yu@mail.utoronto.ca
# 
# Bitmap Display Configuration: 
# - Unit width in pixels: 4
# - Unit height in pixels: 4
# - Display width in pixels: 256
# - Display height in pixels: 256
# - Base Address for Display: 0x10008000 ($gp)
# 
# Which milestones have been reached in this submission? 
# (See the assignment handout for descriptions of the milestones)
# - Milestones 1, 2, 3 and 4
# 
# Which approved features have been implemented for milestone 4? 
# (See the assignment handout for the list of additional features) 
# A. Moving objects [2 marks]: one pickup coin and one pickup key, both required to finish the game
# B. Moving platforms [2 marks]: one left-right moving platforms and one up-down moving platforms
# F. Enemies shoot back! [2 marks]: both the enemy and enemyship can shoot bullets at player, but player can only avoid
# J. Start menu [1 mark]: the start menu before the game which includes "START", "QUIT" and "SPACE TO PICK"
#
# Link to video demonstration for final submission: 
# - (insert YouTube / MyMedia / other URL here). Make sure we can view it!
# https://play.library.utoronto.ca/watch/dde45814d450564bf5f264e9f5a4ff8e 
# 
# Are you OK with us sharing the video with people outside course staff? 
# - No
# 
# Any additional information that the TA needs to know: 
# - To move left, press 'a' continuously.
# - To move right, press 'd' continuously.
# - To quit the game, press 'q' at ANY TIME.
# - To restart the game, press 'r' at ANY TIME.
# - To jump, press 'w', this can be done indefinitely.
# - You must pick up both the coin and key to pass the game.
# - There is one second delay from the start menu to the game and when the player loses a heart, this is intentional.
# - When the player falls into the pit, the user automatically fails the game.
# - The bullet may go through the player after colliding with the player, this is normal.
# - If the player is in the air (i.e. no platforms below), then due to gravity, the player will fall.
##################################################################### 
# Constants used for the program
.eqv	BASE_ADDRESS		0x10008000	# Address of the first unit of the framebuffer (top left)

.eqv	SLEEP_TIME		100		# Sleep time (ms)
.eqv	DISPLAY_WIDTH		64		# The total width of screen
.eqv	DISPLAY_HEIGHT		64		# The total height of screen
.eqv	NEXT_ROW_OFFSET		0x00000100	# Offset to reach the address of the next row

.eqv	GROUND_ADDRESS		0x1000bd00	# Address of ground
.eqv	PLAYER_ADDRESS		0x1000bb00	# The inital player address, $s0 will modify it
.eqv	PIT_ADDRESS		0x1000bc64	# The initial address of the pit
.eqv	DOOR_ADDRESS		0x10008de4	# The address of door

.eqv	GROUND_COL		0x0000c800	# Ground color
.eqv	SKY_COL			0x0000e6ff	# Color for the sky
.eqv	BLACK_COL		0x00000000	# Black color for clear screen
.eqv	PLAYER_COL		0x00ffa0b4	# Player color
.eqv	PLAYER_WING		0x00327dff	# Wing color of player
.eqv	PLAYER_BLADE		0x00b482fa	# Blade color of player
.eqv	BACKGROUND_COL		0xffffffff	# The immediate value equivalent to the background color of game
.eqv	PLATFORM_COL		0x00e6c89b	# Platform color
.eqv	YELLOW_COL		0x00ffe63c	# The color for key and coin
.eqv	ENEMYSHIP_COL		0x00ff4080	# Enemyship color
.eqv	ENEMY_COL		0x00d2d2d2	# Enemy color
.eqv	BULLET_COL		0x000096aa	# Bullet color
.eqv	GREY_COL		0x0082878c	# Grey color for obstacle
.eqv	ORANGE_COL		0x00ff631e	# Orange color for enemy and obstacle	

# Moving platform locations
.eqv	RIGHTMOVE_BASE_ADDRESS	0x100098dc	# The original up-down moving platform address
.eqv	DOWNMOST_ADDRESS	0x1000b3dc	# The bottom-most boundary of the up-down moving platform
.eqv	LEFTMOST_ADDRESS	0x1000b62c	# The original left-right moving platform address
.eqv	BOTTOMMOVE_BASE_ADDRESS	0x1000b6bc	# The left-most boundary of the left-right moving platform

# Enemyship related
.eqv	ENEMYSHIPBULLET		0x1000b9e0	# The bullet shot by enemyship
.eqv	ENEMYSHIP_BOUNDARY	0x1000b5e4	# The top left address of enemyship

# Enemy related
.eqv	ENEMYBULLET		0x10009328	# The bullet shot by the enemy
.eqv	ENEMY_BOUNDARY		0x10009324	# The top left address of enemy

.eqv	OBSTACLE_BOUNDARY	0x10009564	# The top left boundary of obstacle

# Heart locations
.eqv	HEART1			0x100082b8
.eqv	HEART2			0x100082d0
.eqv	HEART3			0x100082e8

.data
    START_MENU: .word 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,  
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,  
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,  
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,  
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,  
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 

RIGHTPLATFORM_DIR:	.word		2	# Global variable stores direction of right moving platform: 1 = up, 2 = down
ENEMYBULLET_DIR:	.word		1	# Global variable stores direction of enemy bullet: 1 = right, 2 = left
ENEMYSHIPBULLET_DIR:	.word		2	# Global variable stores direction of enemyship bullet: 1 = right, 2 = left
BOTTOMPLATFORM_DIR:	.word		2	# Global variable stores direction of bottom moving platform: 1 = right, 2 = left
# An array of addresses for location of coin
COIN:			.word		0x10008a18,0x10008b18,0x10008c18,0x10008914,0x10008a14,0x10008c14,0x10008d14,0x10008910,0x10008d10,0x1000890c,0x10008d0c,0x10008908,0x10008a08,0x10008c08,0x10008d08,0x10008a04,0x10008b04,0x10008c04
# The above addresses shifted up by 1 pixel
COIN_2:			.word		0x10008918,0x10008a18,0x10008b18,0x10008814,0x10008914,0x10008b14,0x10008c14,0x10008810,0x10008c10,0x1000880c,0x10008c0c,0x10008808,0x10008908,0x10008b08,0x10008c08,0x10008904,0x10008a04,0x10008b04
COIN_PICKUP:		.word		0	# An integer indicating whether user has picked up the coin: 0 = not picked up, 1 = picked up

# An array of addresses for location of key
KEY:			.word		0x1000a0b4,0x1000a1b4,0x1000a1b8,0x1000a1bc,0x10009fb4,0x10009fb8,0x10009fbc,0x10009eb4,0x10009db4,0x10009db0,0x10009db8,0x10009cac,0x10009cbc,0x10009bac,0x10009bbc,0x10009ab0,0x10009ab4,0x10009ab8
# The above addresses shifted left by 1 pixel
KEY_2:			.word		0x1000a0b0,0x1000a1b0,0x1000a1b4,0x1000a1b8,0x10009fb0,0x10009fb4,0x10009fb8,0x10009eb0,0x10009db0,0x10009dac,0x10009db4,0x10009ca8,0x10009cb8,0x10009ba8,0x10009bb8,0x10009aac,0x10009ab0,0x10009ab4	
KEY_PICKUP:		.word		0	# An integer indicating whether user has picked up the key: 0 = not picked up, 1 = picked up

# The location addresses of the obstacle
OBSTACLE:		.word		0x10009564,0x10009568,0x1000956c,0x10009570,0x10009574,0x10009664,0x10009668,0x1000966c,0x10009670,0x10009674,0x10009764,0x10009768,0x1000976c,0x10009770,0x10009774
# The location addresses of the enemy
ENEMY:			.word		0x10009718,0x10009618,0x10009518,0x10009418,0x10009318,0x10009414,0x10009514,0x1000931c,0x1000941c,0x1000951c,0x10009320,0x10009420,0x10009520,0x10009620,0x10009720,0x10009424,0x10009524
# The location addresses of the enemyship
ENEMYSHIP:		.word		0x1000b9e4,0x1000b9e8,0x1000b8ec,0x1000b9ec,0x1000b5f0,0x1000b6f0,0x1000b7f0,0x1000b8f0,0x1000b9f0,0x1000baf0,0x1000bbf0,0x1000b6f4,0x1000b7f4,0x1000b8f4,0x1000b9f4,0x1000baf4,0x1000b7f8,0x1000b8f8,0x1000b9f8,0x1000b8fc

.text
# $s0 global variable stores player's current horizontal position
# $s1 global variable stores player's previous horizontal position
# $s2 global variable stores player's current health
# $s3 global variable stores the current enemyship bullet position
# $s4 global variable stores the current enemy bullet position
# $s5 global variable stores the right moving platform address
# $s6 global variable stores the bottom moving platform address
# $s7 temporarily stores the user's selection in the start menu

main:

# ------ Draw the entire start menu page ------- #
DRAW_START_MENU:
	li $t0, BASE_ADDRESS
	la $t1, START_MENU
	li $t3, 1
	li $s7, 0				# the user did not choose initially
	
START_MENU_LOOP:
	lw $t2, 0($t1)
	
	sw $t2, 0($t0)
	addi $t0, $t0, 4
	addi $t1, $t1, 4

	addi $t3, $t3, 1
	bne $t3, 4096, START_MENU_LOOP
	
# ----- Check if the user pressed any keys ------ #
ARROW_MOVE:
	# Check key press	
	li $t9, 0xffff0000	
	lw $t8, 0($t9)
	beq $t8, 1, MENU_KEYPRESS		# keypress happened
	j ARROW_MOVE
	
MENU_KEYPRESS:
	lw $t5, 4($t9)				# $t5: pressed key

	beq $t5, 0x20, CHECK_SELECTION		# ' ' ASCII = 0x20 or 32
	beq $t5, 0x77, DRAW_START_ARROW 	# 'w' ASCII = 0x77 or 119
	beq $t5, 0x73, DRAW_QUIT_ARROW		# 's' ASCII = 0x73 or 115
	
	j ARROW_MOVE
	
# ------ Draw the arrow indicator in front of START ------- #
DRAW_START_ARROW:
	li $s7, 1		# indicating user chose START
	
	li $t0, 0x10008714
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009b14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008814
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009c14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008818
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009c18
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008914
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009d14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x1000891c
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009d1c
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008a14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009e14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008a18
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009e18
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10008b14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10009f14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $v0, 32
	li $a0, 500
	syscall
	
	j MENU_KEYPRESS

# ------ Draw the arrow indicator in front of QUIT ------- #
DRAW_QUIT_ARROW:
	li $s7, 2		# indicating user chose QUIT
	
	li $t0, 0x10009b14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008714
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009c14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008814
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009c18
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008818
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009d14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008914
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009d1c
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x1000891c
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009e14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008a14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009e18
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008a18
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $t0, 0x10009f14
	li $t7, BACKGROUND_COL
	sw $t7, 0($t0)
	li $t0, 0x10008b14
	li $t7, BLACK_COL
	sw $t7, 0($t0)
	
	li $v0, 32
	li $a0, 500
	syscall
	
	j MENU_KEYPRESS
	
CHECK_SELECTION:
	beq $s7, 0, MENU_KEYPRESS	# User did not choose
	beq $s7, 1, MAIN		# User chose START
	beq $s7, 2, EXIT		# User chose QUIT
	j MENU_KEYPRESS
	
EXIT:
	jal CLEAR_SCREEN
	j END
	
# ------- The beginning of my game ------- #
MAIN:
	li $s0, PLAYER_ADDRESS		# load player horizontal position
	li $s1, PLAYER_ADDRESS		# to both $s0 and $s1
	li $s2, 3			# player's initial health is 3
	
	li $s3, ENEMYSHIPBULLET
	li $s4, ENEMYBULLET
	li $s5, RIGHTMOVE_BASE_ADDRESS	# the inital moving platform location on the right
	li $s6, BOTTOMMOVE_BASE_ADDRESS	# the inital moving platform location on the bottom
		
# ---------- Set the background of game -------------- #
SET_BACKGROUND:
	li $t0, BASE_ADDRESS
	li $t1, DISPLAY_WIDTH
	li $t2, DISPLAY_HEIGHT
	li $t3, BACKGROUND_COL

	mult $t1, $t2		# $t4 contains size of display
	mflo $t4

	li $t5, 0		# $t5: counter to the current pixel
	
SET_BACKGROUND_LOOP:
	bge $t5, $t4, DRAW_SKY_HEART

	sw $t3, 0($t0)

	addi $t0, $t0, 4	# increment to the next pixel
	addi $t5, $t5, 1	# increment the counter

	j SET_BACKGROUND_LOOP	
	
# ------ Draw the hearts (lives) of the player ----- #
DRAW_SKY_HEART:
	# draw sky
	li $a0, BASE_ADDRESS
	li $a1, 64
	li $a2, 7
	li $a3, SKY_COL
	jal DRAW_PLATFORM
	
	li $t0, 0x00e91e62		# t0 = primary health color
	li $t1, 0x00f05289		# t1 = secondary health color
	li $t2, 0x00fcabc7		# t3 = tertiary health color
	
	# Draw first heart
	li $t3, HEART1
	sw $t1, 4($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t2, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 8($t3)
	
	# Draw second heart
	li $t3, HEART2
	sw $t1, 4($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t2, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 8($t3)
	
	# Draw third heart
	li $t3, HEART3
	sw $t1, 4($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t2, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t1, 0($t3)
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	sw $t0, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 4($t3)
	sw $t0, 8($t3)
	sw $t0, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t0, 8($t3)
	
# ------- Program below will be looped forever ------ #
MAIN_LOOP:
	jal SET_PLATFORM
	jal SET_PLAYER
	jal SET_OBJECTS
	jal SET_KEY
	jal SET_COIN
	jal SET_ENEMYSHIP_BULLET
	jal SET_ENEMY_BULLET
	
	jal SET_RIGHTMOVING_PLATFORM
	jal SET_BOTTOMMOVING_PLATFORM

	jal PLAYER_MOVE
	jal GRAVITY_CHECK
	
	jal CHECK_ENEMYSHIP	# check enemyship collision
	jal CHECK_ENEMY		# check enemy collision
	jal BULLET_CHECK	# check bullet collision
	jal OBSTACLE_CHECK	# check obstacle collision
	jal KEY_CHECK		# check if player touches key
	jal COIN_CHECK		# check if player touches coin
	
	li $v0, 32
	li $a0, SLEEP_TIME	# sleep for some time
	syscall
	
	j MAIN_LOOP

# ----- Draw the platforms ------- #
SET_PLATFORM:
	addi $sp, $sp, -4
	sw $ra, 0($sp)		# allocate space to push $ra onto stack
	
	# Draw top left platform
	li $a0, 0x10008e00
	li $a1, 7		# platform width will always be 11 pixel
	li $a2, 1		# platform height will always be 1 pixel
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	# Draw top right platform
	li $a0, 0x10008ed4
	li $a1, 11
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	# Draw middle platform
	li $a0, 0x10009800
	li $a1, 50
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	li $a0, 0x100099c4
	li $a1, 1
	li $a2, 11
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	li $a0, 0x1000a32c
	li $a1, 39
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	li $a0, 0x1000af00
	li $a1, 8
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	# Draw ground
	li $a0, GROUND_ADDRESS
	li $a1, 64
	li $a2, 2
	li $a3, GROUND_COL
	jal DRAW_PLATFORM
	
	# Draw pit
	li $a0, PIT_ADDRESS
	li $a1, 20
	li $a2, 3
	li $a3, BACKGROUND_COL	# the color of the pit is same as background
	jal DRAW_PLATFORM

	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra			# load $ra from stack and return to MAIN_LOOP

# ---- Helper function to draw the static platform ----- #
DRAW_PLATFORM:
	move $t1, $a0		# $t1 = temporary platform address
	move $t2, $a1		# $t2 = temporary platform width
	move $t3, $a2		# $t3 = temporary platform height
	move $t0, $a3		# $t0 = color for platform

	j INITIALIZE_PLATFORM
	
INITIALIZE_PLATFORM:
	li $t8, NEXT_ROW_OFFSET	# $t8 = jump to next row
	
	li $t7, 4
	mult $t2, $t7
	mflo $t2
	
	li $t4, 0		# counter for the platform height
	
START_DRAW_ROW:
	bge $t4, $t3, DRAW_END
	li $t5, 0		# counter for the platform width
	
START_DRAW_UNIT:
	bge $t5, $t2, END_DRAW_PIXEL
	add $t6, $t1, $t5
	sw $t0, 0($t6)
	addi $t5, $t5, 4
	j START_DRAW_UNIT
	
END_DRAW_PIXEL:
	addi $t4, $t4, 1
	addi $t1, $t1, NEXT_ROW_OFFSET
	j START_DRAW_ROW
	
DRAW_END:
	jr $ra

# ----------- Draw player ------------ #
SET_PLAYER:
	li $t7, PLAYER_COL		# $t7: pink color
	sw $t7, 0($s0)
	sw $t7, 4($s0)
	sw $t7, 256($s0)
	sw $t7, 260($s0)
	
	jr $ra
	
# ---------- Draw objects ----------- #
SET_OBJECTS:

# ----- Set location for the obstacle ---- #
CREATE_OBSTACLE:
	li $t1, BACKGROUND_COL
	li $t2, GREY_COL
	li $t3, ORANGE_COL

	la $t4, OBSTACLE
	lw $t5, 0($t4)
	sw $t1, 0($t5)
	lw $t5, 4($t4)
	sw $t2, 0($t5)
	lw $t5, 8($t4)
	sw $t1, 0($t5)
	lw $t5, 12($t4)
	sw $t3, 0($t5)
	lw $t5, 16($t4)
	sw $t1, 0($t5)
	lw $t5, 20($t4)
	sw $t2, 0($t5)
	lw $t5, 24($t4)
	sw $t1, 0($t5)
	lw $t5, 28($t4)
	sw $t2, 0($t5)
	lw $t5, 32($t4)
	sw $t1, 0($t5)
	lw $t5, 36($t4)
	sw $t2, 0($t5)
	lw $t5, 40($t4)
	sw $t1, 0($t5)
	lw $t5, 44($t4)
	sw $t3, 0($t5)
	lw $t5, 48($t4)
	sw $t1, 0($t5)
	lw $t5, 52($t4)
	sw $t2, 0($t5)
	lw $t5, 56($t4)
	sw $t1, 0($t5)
	
# ------ Set location for the enemyship ----- #
CREATE_ENEMYSHIP:
	la $t6, ENEMYSHIP		# $t5 = each entry in the word ENEMYSHIP
	li $t7, ENEMYSHIP_COL		# $t7 = the enemyship's color
		
	lw $t5, 0($t6)
	sw $t7, 0($t5)
	lw $t5, 4($t6)
	sw $t7, 0($t5)
	lw $t5, 8($t6)
	sw $t7, 0($t5)
	lw $t5, 12($t6)
	sw $t7, 0($t5)
	lw $t5, 16($t6)
	sw $t7, 0($t5)
	lw $t5, 20($t6)
	sw $t7, 0($t5)
	lw $t5, 24($t6)
	sw $t7, 0($t5)
	lw $t5, 28($t6)
	sw $t7, 0($t5)
	lw $t5, 32($t6)
	sw $t7, 0($t5)
	lw $t5, 36($t6)
	sw $t7, 0($t5)
	lw $t5, 40($t6)
	sw $t7, 0($t5)
	lw $t5, 44($t6)
	sw $t7, 0($t5)
	lw $t5, 48($t6)
	sw $t7, 0($t5)
	lw $t5, 52($t6)
	sw $t7, 0($t5)
	lw $t5, 56($t6)
	sw $t7, 0($t5)
	lw $t5, 60($t6)
	sw $t7, 0($t5)
	lw $t5, 64($t6)
	sw $t7, 0($t5)
	lw $t5, 68($t6)
	sw $t7, 0($t5)
	lw $t5, 72($t6)
	sw $t7, 0($t5)
	lw $t5, 76($t6)
	sw $t7, 0($t5)	

# ------- Set the location of enemy ------- #
CREATE_ENEMY:
	li $t8, ENEMY_COL	# $t8 = grey color for enemy's body
	li $t3, ORANGE_COL	# $t3 = orange color for enemy's eyes
	
	la $t0, ENEMY		# $t6 = each entry in the word ENEMY
	lw $t6, 0($t0)
	sw $t8, 0($t6)
	lw $t6, 4($t0)
	sw $t8, 0($t6)
	lw $t6, 8($t0)
	sw $t8, 0($t6)
	lw $t6, 12($t0)
	sw $t8, 0($t6)
	lw $t6, 16($t0)
	sw $t8, 0($t6)
	lw $t6, 20($t0)
	sw $t8, 0($t6)
	lw $t6, 24($t0)
	sw $t3, 0($t6)
	lw $t6, 28($t0)
	sw $t3, 0($t6)
	lw $t6, 32($t0)
	sw $t8, 0($t6)
	lw $t6, 40($t0)
	sw $t8, 0($t6)
	lw $t6, 44($t0)
	sw $t8, 0($t6)
	lw $t6, 48($t0)
	sw $t8, 0($t6)
	lw $t6, 52($t0)
	sw $t8, 0($t6)
	lw $t6, 56($t0)
	sw $t8, 0($t6)
	lw $t6, 60($t0)
	sw $t8, 0($t6)
	lw $t6, 64($t0)
	sw $t3, 0($t6)
	
	li $t3, 0x0000aac8	# $t3 = bright blue color for enemy's hips
	lw $t6, 36($t0)
	sw $t3, 0($t6)
	
	jr $ra
	
# ----- Sets the location of the moving coin ----- #
SET_COIN:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t1, COIN_PICKUP		# check if coin already picked up
	lw $t2, 0($t1)			# if so, do not draw coin
	beq $t2, 1, RETURN_TO_MAIN
	
	la $a0, COIN_2
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, COIN
	li $a1, YELLOW_COL
	jal DRAW_KEY_COIN
	
	li $v0, 32
	li $a0, 50		# sleep for some time to change color
	syscall
	
	la $a0, COIN
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, COIN_2
	li $a1, YELLOW_COL
	jal DRAW_KEY_COIN
	
	j RETURN_TO_MAIN
	
	jr $ra

# ----- Sets the location of the moving key ---- #	
SET_KEY:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t1, KEY_PICKUP		# check if key already picked up
	lw $t2, 0($t1)			# if so, do not draw key
	beq $t2, 1, RETURN_TO_MAIN
	
	la $a0, KEY_2
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, KEY
	li $a1, YELLOW_COL
	jal DRAW_KEY_COIN
	
	li $v0, 32
	li $a0, 50		# sleep for some time to change color
	syscall
	
	la $a0, KEY
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, KEY_2
	li $a1, YELLOW_COL
	jal DRAW_KEY_COIN
	
	j RETURN_TO_MAIN

# ------ Set the color for both the key and coin ------ #
DRAW_KEY_COIN:
	move $t4, $a0		# $t4 = the address that stores the word
	move $t6, $a1		# $t6 = the color to be painted
	
	lw $t5, 0($t4)
	sw $t6, 0($t5)
	lw $t5, 4($t4)
	sw $t6, 0($t5)
	lw $t5, 8($t4)
	sw $t6, 0($t5)
	lw $t5, 12($t4)
	sw $t6, 0($t5)
	lw $t5, 16($t4)
	sw $t6, 0($t5)
	lw $t5, 20($t4)
	sw $t6, 0($t5)
	lw $t5, 24($t4)
	sw $t6, 0($t5)
	lw $t5, 28($t4)
	sw $t6, 0($t5)
	lw $t5, 32($t4)
	sw $t6, 0($t5)
	lw $t5, 36($t4)
	sw $t6, 0($t5)
	lw $t5, 40($t4)
	sw $t6, 0($t5)
	lw $t5, 44($t4)
	sw $t6, 0($t5)
	lw $t5, 48($t4)
	sw $t6, 0($t5)
	lw $t5, 52($t4)
	sw $t6, 0($t5)
	lw $t5, 56($t4)
	sw $t6, 0($t5)
	lw $t5, 60($t4)
	sw $t6, 0($t5)
	lw $t5, 64($t4)
	sw $t6, 0($t5)
	lw $t5, 68($t4)
	sw $t6, 0($t5)
	
	jr $ra
	
# -------- Create the moving enemy bullet ----- #
SET_ENEMY_BULLET:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t5, ENEMYBULLET_DIR
	lw $t7, 0($t5)
	beq $t7, 1, MOVE_RIGHT
	beq $t7, 2, MOVE_LEFT

MOVE_RIGHT:
	bge $s4, 0x100093fc, SET_LEFT
	addi $t4, $s4, -4	# $t4: previous location
	move $a0, $t4
	jal CLEAR_BULLET
	move $a0, $s4
	jal DRAW_BULLET
	
	addi $s4, $s4, 4
	j RETURN_TO_MAIN
	
MOVE_LEFT:
	ble $s4, ENEMYBULLET, SET_RIGHT
	addi $t4, $s4, 4	# $t4: previous location
	move $a0, $t4
	jal CLEAR_BULLET
	move $a0, $s4
	jal DRAW_BULLET
	
	addi $s4, $s4, -4
	j RETURN_TO_MAIN

# ------- Create the moving enemyship bullet ------- #
SET_ENEMYSHIP_BULLET:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t5, ENEMYSHIPBULLET_DIR
	lw $t7, 0($t5)
	beq $t7, 1, SHOOT_RIGHT
	beq $t7, 2, SHOOT_LEFT

SHOOT_LEFT:
	ble $s3, 0x1000b900, SET_RIGHT
	addi $t3, $s3, 4	# $t3: previous location
	move $a0, $t3
	jal CLEAR_BULLET
	move $a0, $s3
	jal DRAW_BULLET
	
	addi $s3, $s3, -4
	j RETURN_TO_MAIN
	
SHOOT_RIGHT:
	bge $s3, ENEMYSHIPBULLET, SET_LEFT
	addi $t3, $s3, -4	# $t3: previous location
	move $a0, $t3
	jal CLEAR_BULLET
	move $a0, $s3
	jal DRAW_BULLET
	
	addi $s3, $s3, 4
	j RETURN_TO_MAIN
	
SET_LEFT:
	li $t7, 2
	sw $t7, 0($t5)
	j RETURN_TO_MAIN
	
SET_RIGHT:
	li $t7, 1
	sw $t7, 0($t5)
	j RETURN_TO_MAIN
	
# ----- Clear the current position of bullet ----- #
CLEAR_BULLET:
	li $t7, BACKGROUND_COL
	move $t8, $a0
	sw $t7, 0($t8)
	jr $ra
	
# ------ Draw the new location of bullet ----- #
DRAW_BULLET:
	li $t7, BULLET_COL
	move $t8, $a0
	sw $t7, 0($t8)
	jr $ra
	
# ------- Draw the up-down moving platform ------- #
SET_RIGHTMOVING_PLATFORM:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t6, RIGHTPLATFORM_DIR
	lw $t9, 0($t6)
	beq $t9, 1, DRAW_MOVING_UP_PLATFORM
	beq $t9, 2, DRAW_MOVING_DOWN_PLATFORM
	
DRAW_MOVING_UP_PLATFORM:
	beq $s5, RIGHTMOVE_BASE_ADDRESS, SET_MOVING_DOWN
	
# ------ Check if a player is on the up-down moving platform moving up ------ #
CHECK_PLAYER_UP:
	addi $t0, $s5, -256		# $t0 = pixel above moving platform
	addi $t1, $t0, 32		# $t1 = length of platform
	
UP_PLATFORM_LOOP:
	beq $t0, $t1, UPDATE_UP_PLATFORM
	# Check if color above platform is not background color
	lw $t2, 0($t0)			# $t2 = color of pixel of $t0
	bne $t2, BACKGROUND_COL, PLAYER_MOVING_UP
	
	addi $t0, $t0, 4
	j UP_PLATFORM_LOOP
	
# ------ Update player position, position remain relative unchanged to platform ------ #
PLAYER_MOVING_UP:
	move $s1, $s0
	addi $s0, $s0, -256
	jal DRAW_PERSON		# draw player new position
	
# ------ Update player position, position remain relative unchanged to platform ------ #
UPDATE_UP_PLATFORM:
	move $t8, $s5		# $t8: previous platform address
	addi $s5, $s5, -256
	
	# Erase previous platform
	move $a0, $t8
	li $a1, 8
	li $a2, 1
	li $a3, BACKGROUND_COL	# $t0 = background color to replace previous platform color
	jal DRAW_PLATFORM
	
	# Draw new platform
	move $a0, $s5
	li $a1, 8
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
		
	j RETURN_TO_MAIN
	
DRAW_MOVING_DOWN_PLATFORM:
	beq $s5, DOWNMOST_ADDRESS, SET_MOVING_UP
	
# ------ Check if a player is on the up-down moving platform moving down ------ #
CHECK_PLAYER_DOWN:
	addi $t0, $s5, -256		# $t0 = pixel above moving platform
	addi $t1, $t0, 32		# $t1 = length of platform
	
DOWN_PLATFORM_LOOP:
	beq $t0, $t1, UPDATE_DOWN_PLATFORM
	# Check if color above platform is not background color
	lw $t2, 0($t0)			# $t2 = color of pixel of $t0
	bne $t2, BACKGROUND_COL, PLAYER_MOVING_DOWN
	
	addi $t0, $t0, 4
	j DOWN_PLATFORM_LOOP
	
# ------ Update player position, position remain relative unchanged to platform ------ #
PLAYER_MOVING_DOWN:
	move $s1, $s0
	addi $s0, $s0, 256	
	
# ----- Set new position of platform ---- #
UPDATE_DOWN_PLATFORM:
	move $t8, $s5		# $t8: previous platform address
	addi $s5, $s5, 256
	
	# Erase previous platform
	move $a0, $t8
	li $a1, 8
	li $a2, 1
	li $a3, BACKGROUND_COL	# $t0 = background color to replace previous platform color
	jal DRAW_PLATFORM
	
	# Draw new platform
	move $a0, $s5
	li $a1, 8
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	jal DRAW_PERSON		# draw new person location

	j RETURN_TO_MAIN
	
SET_MOVING_UP:
	li $v0, 32
	li $a0, 200	# wait for a few seconds
	syscall
	
	li $t9, 1
	sw $t9, 0($t6)		# change value of RIGHTPLATFORM_DIR to up
	j RETURN_TO_MAIN
	
SET_MOVING_DOWN:
	li $v0, 32
	li $a0, 200	# wait for a few seconds
	syscall

	li $t9, 2
	sw $t9, 0($t6)		# change value of RIGHTPLATFORM_DIR to up
	j RETURN_TO_MAIN
	
# ------- Draw the left-right moving platform ------- #
SET_BOTTOMMOVING_PLATFORM:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t6, BOTTOMPLATFORM_DIR
	lw $t9, 0($t6)
	beq $t9, 1, DRAW_MOVING_RIGHT_PLATFORM
	beq $t9, 2, DRAW_MOVING_LEFT_PLATFORM
	
DRAW_MOVING_RIGHT_PLATFORM:
	beq $s6, BOTTOMMOVE_BASE_ADDRESS, SET_MOVING_LEFT
	
# ------ Check if a player is on the left-right moving platform moving right ------ #
CHECK_PLAYER_RIGHT:
	addi $t0, $s6, -256		# $t0 = pixel above moving platform
	addi $t1, $t0, 32		# $t1 = length of platform
	
RIGHT_PLATFORM_LOOP:
	beq $t0, $t1, UPDATE_RIGHT_MOVING
	# Check if color above platform is not background color
	lw $t2, 0($t0)			# $t2 = color of pixel of $t0
	bne $t2, BACKGROUND_COL, PLAYER_MOVING_RIGHT
	
	addi $t0, $t0, 4
	j RIGHT_PLATFORM_LOOP
	
# ------ Update player position, position remain relative unchanged to platform ------ #
PLAYER_MOVING_RIGHT:
	move $s1, $s0
	addi $s0, $s0, 4
	jal DRAW_PERSON		# draw player new position
	
# ------ Update player position, position remain relative unchanged to platform ------ #
UPDATE_RIGHT_MOVING:
	move $t8, $s6		# $t8: previous platform address
	addi $s6, $s6, 4
	
	# Erase previous platform
	move $a0, $t8
	li $a1, 8
	li $a2, 1
	li $a3, BACKGROUND_COL	# $t0 = background color to replace previous platform color
	jal DRAW_PLATFORM
	
	# Draw new platform
	move $a0, $s6
	li $a1, 8
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	j RETURN_TO_MAIN
	
DRAW_MOVING_LEFT_PLATFORM:
	beq $s6, LEFTMOST_ADDRESS, SET_MOVING_RIGHT	
	
# ------ Check if a player is on the left-right moving platform moving left ------ #
CHECK_PLAYER_LEFT:
	addi $t0, $s6, -256		# $t0 = pixel above moving platform
	addi $t1, $t0, 32		# $t1 = length of platform
	
LEFT_PLATFORM_LOOP:
	beq $t0, $t1, UPDATE_LEFT_MOVING
	# Check if color above platform is not background color
	lw $t2, 0($t0)			# $t2 = color of pixel of $t0
	bne $t2, BACKGROUND_COL, PLAYER_MOVING_LEFT
	
	addi $t0, $t0, 4
	j LEFT_PLATFORM_LOOP
	
PLAYER_MOVING_LEFT:
	move $s1, $s0
	addi $s0, $s0, -4
	jal DRAW_PERSON		# draw player new position
	
UPDATE_LEFT_MOVING:
	move $t8, $s6		# $t8: previous platform address
	addi $s6, $s6, -4
	
	# Erase previous platform
	move $a0, $t8
	li $a1, 8
	li $a2, 1
	li $a3, BACKGROUND_COL	# $t0 = background color to replace previous platform color
	jal DRAW_PLATFORM
	
	# Draw new platform
	move $a0, $s6
	li $a1, 8
	li $a2, 1
	li $a3, PLATFORM_COL
	jal DRAW_PLATFORM
	
	j RETURN_TO_MAIN
	
SET_MOVING_RIGHT:
	li $t9, 1
	sw $t9, 0($t6)		# change value of BOTTOMPLATFORM_DIR to right
	j RETURN_TO_MAIN
	
SET_MOVING_LEFT:
	li $t9, 2
	sw $t9, 0($t6)		# change value of BOTTOMPLATFORM_DIR to left
	j RETURN_TO_MAIN
	
	
# ------- Player Movement Detection ------ #
PLAYER_MOVE:
	addi $sp, $sp, -4
	sw $ra, 0($sp)

CHECK_KEYPRESS:	
	# Check key press	
	li $t7, 0xffff0000	
	lw $t8, 0($t7)
	beq $t8, 1, KEYPRESS		# keypress happened
	j RETURN_TO_MAIN		# keypress did not happen
	
# -------- Keypress Detection ------- #
KEYPRESS:
	lw $t5, 4($t7)			# $t5: pressed key
	
	beq $t5, 0x61, A_KEY_PRESSED 	# 'a' ASCII = 0x61 or 97
	beq $t5, 0x64, D_KEY_PRESSED 	# 'd' ASCII = 0x64 or 100
	beq $t5, 0x77, W_KEY_PRESSED 	# 'w' ASCII = 0x77 or 119
	beq $t5, 0x72, R_KEY_PRESSED	# 'r' ASCII = 0x72 or 114
	beq $t5, 0x71, Q_KEY_PRESSED	# 'q' ASCII = 0x71 or 113
	
	j MAIN_LOOP
    
A_KEY_PRESSED:	
	# obtain the player's horizontal position
	li $t0, 256
	li $t1, BASE_ADDRESS
	subu $t1, $s0, $t1
	div $t1, $t0
	mfhi $t2			# $t2 = horizontal position of player
	beqz $t2, RETURN_TO_MAIN	# check if player reached left boundary
	beq $t2, 4, RETURN_TO_MAIN
	
	# check if player touches platform or other objects
	addi $t4, $s0, -4		# $t4 = pixel to the top left of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, -8		# $t4 = two pixels to the top left of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, 252		# $t4 = pixel to the bottom left of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, 248		# $t4 = two pixels to the bottom left of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	
	move $s1, $s0			# $s1: player's previous horizontal position
	addi $s0, $s0, -8		# $s0: player's current horizontal position (global)
	
	jal DRAW_PERSON
	j RETURN_TO_MAIN
	
D_KEY_PRESSED:	
	# obtain the player's horizontal position
	li $t0, 256
	li $t1, BASE_ADDRESS
	subu $t1, $s0, $t1
	div $t1, $t0
	mfhi $t2			# $t2 = horizontal position of player
	beq $t2, 248, RETURN_TO_MAIN	# check if player reached right boundary
	beq $t2, 244, RETURN_TO_MAIN
	
	# check if player touches platform or other objects
	addi $t4, $s0, 8		# $t4 = pixel to the top right of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, 12		# $t4 = two pixels to the top right of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, 264		# $t4 = pixel to the bottom right of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	addi $t4, $s0, 268		# $t4 = two pixels to the bottom right of player
	lw $t3, 0($t4)			# $t3 = the color of pixel
	bne $t3, BACKGROUND_COL, CHECK_KEYPRESS
	
	move $s1, $s0
	addi $s0, $s0, 8
	
	jal DRAW_PERSON	
	j RETURN_TO_MAIN
	
W_KEY_PRESSED:	
	# Check if the player reached lower part of platform	
	addi $t5, $s0, -256	# $t5 = pixel to the top left the player
	lw $t7, 0($t5)		# $t7 = color of pixel
	bne $t7, BACKGROUND_COL, CHECK_KEYPRESS
	
	addi $t5, $s0, -252	# $t5 = pixel to the top right player
	lw $t7, 0($t5)		# $t7 = color of pixel
	bne $t7, BACKGROUND_COL, CHECK_KEYPRESS
	
	addi $t5, $s0, -512	# $t5 = two pixels above player to the left
	lw $t7, 0($t5)		# $t7 = color of pixel
	bne $t7, BACKGROUND_COL, CHECK_KEYPRESS
	
	addi $t5, $s0, -508	# $t5 = two pixels above player to the right
	lw $t7, 0($t5)		# $t7 = color of pixel
	bne $t7, BACKGROUND_COL, CHECK_KEYPRESS
		
	move $s1, $s0
	addi $s0, $s0, -512
	
	li $v0, 32
	li $a0, SLEEP_TIME	# sleep for some time
	syscall
	
	jal DRAW_PERSON
	j RETURN_TO_MAIN
	
CLEAR_PLAYER:
	li $t6, BACKGROUND_COL	# $t6: white
	sw $t6, 0($s0)
	sw $t6, 4($s0)
	sw $t6, 256($s0)
	sw $t6, 260($s0)
	j CHECK_KEYPRESS
	
Q_KEY_PRESSED:
	j DRAW_GAME_OVER
	
R_KEY_PRESSED:
	jal CLEAR_SCREEN
	j MAIN

# ------- Update player position when moving horizontally ------ #
DRAW_PERSON:
# ------ Erase previous player location ------- #
	li $t6, BACKGROUND_COL	# $t6: white
	sw $t6, 0($s1)
	sw $t6, 4($s1)
	sw $t6, 256($s1)
	sw $t6, 260($s1)

# ------ Draw current player location ------- #
	li $t7, PLAYER_COL	# $t7: blue
	sw $t7, 0($s0)
	sw $t7, 4($s0)
	sw $t7, 256($s0)
	sw $t7, 260($s0)
	jr $ra
	
# ------------ Clear Screen content ------------ #
CLEAR_SCREEN:	
	li $t0, BASE_ADDRESS
	li $t1, DISPLAY_WIDTH
	li $t2, DISPLAY_HEIGHT
	li $t3, BLACK_COL

	mult $t1, $t2		
	mflo $t4		# $t4 contains the total pixel area of screen

	addi $t5, $zero, 0	# $t5: counter to current pixel
	
CLEAR_BACKGROUND_LOOP:
	bge $t5, $t4, COMPLETE

	sw $t3, 0($t0)

	addi $t0, $t0, 4
	addi $t5, $t5, 1

	j CLEAR_BACKGROUND_LOOP
	
COMPLETE:
	jr $ra
	
# ---- Checks if person is in the air and move down by one pixel ---- #
GRAVITY_CHECK:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
POSITION_CHECK:
	# check if the player falls into the pit, if so game over
	bge $s0, PIT_ADDRESS, DRAW_GAME_OVER
	
	# check color of the pixel below the person
	addi $t6, $s0, 512				# $t6: pixel to the bottom left of the person
	lw $t7, 0($t6)					# store color in $t7
	bne $t7, BACKGROUND_COL, RETURN_TO_MAIN		# player still in air
	addi $t6, $s0, 516				# $t6: pixel to the bottom right of the person
	lw $t7, 0($t6)					# store color in $t7
	bne $t7, BACKGROUND_COL, RETURN_TO_MAIN		# player still in air
	
DROP:
	move $s1, $s0
	addi $s0, $s0, 256
	
	li $v0, 32
	li $a0, SLEEP_TIME	# sleep for some time
	syscall
	
	jal DRAW_PERSON
	j RETURN_TO_MAIN
	
# ----- Check if a person touches enemyship ----- #
CHECK_ENEMYSHIP:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	addi $t3, $s0, 512		# check bottom left collision
	addi $t4, $s0, 516		# check bottom right collision
	addi $t5, $s0, -4		# check top left collision
	addi $t6, $s0, 8		# check top right collision
	addi $t7, $s0, 252		# check bottom left
	addi $t8, $s0, 264		# check bottom right
	
	li $t9, ENEMYSHIP_BOUNDARY
	
ENEMYSHIP_BOUNDARY_CHECK:
	beq $t9, 0x1000b5fc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000b6fc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000b7fc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000b8fc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000b9fc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000bafc, NEXT_ROW_ENEMYSHIP
	beq $t9, 0x1000bbfc, RETURN_TO_MAIN
	
	beq $t9, $t3, PLAYER_HIT
	beq $t9, $t4, PLAYER_HIT
	beq $t9, $t5, PLAYER_HIT
	beq $t9, $t6, PLAYER_HIT
	beq $t9, $t7, PLAYER_HIT
	beq $t9, $t8, PLAYER_HIT
	
	addi $t9, $t9, 4
	j ENEMYSHIP_BOUNDARY_CHECK
	
NEXT_ROW_ENEMYSHIP:
	addi $t9, $t9, 232
	j ENEMYSHIP_BOUNDARY_CHECK
	
# ----- Check if a person touches enemy ----- #
CHECK_ENEMY:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	addi $t3, $s0, 512		# check bottom left collision
	addi $t4, $s0, 516		# check bottom right collision
	addi $t5, $s0, -4		# check top left collision
	addi $t6, $s0, 8		# check top right collision
	addi $t7, $s0, 252		# check bottom left
	addi $t8, $s0, 264		# check bottom right
	
	li $t9, ENEMY_BOUNDARY
	
ENEMY_BOUNDARY_CHECK:
	beq $t9, 0x10009328, NEXT_ROW_ENEMY
	beq $t9, 0x10009428, NEXT_ROW_ENEMY
	beq $t9, 0x10009528, NEXT_ROW_ENEMY
	beq $t9, 0x10009628, NEXT_ROW_ENEMY
	beq $t9, 0x10009728, RETURN_TO_MAIN
	
	beq $t9, $t3, PLAYER_HIT
	beq $t9, $t4, PLAYER_HIT
	beq $t9, $t5, PLAYER_HIT
	beq $t9, $t6, PLAYER_HIT
	beq $t9, $t7, PLAYER_HIT
	beq $t9, $t8, PLAYER_HIT
	
	addi $t9, $t9, 4
	j ENEMY_BOUNDARY_CHECK
	
NEXT_ROW_ENEMY:
	addi $t9, $t9, 240
	j ENEMY_BOUNDARY_CHECK
	
# ------ Check if player collides with bullet ------- #
BULLET_CHECK:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
		
	beq $s0, $s3, PLAYER_HIT	# check collision of player positions
	beq $s0, $s4, PLAYER_HIT
	
	addi $t9, $s0, 4
	beq $t9, $s3, PLAYER_HIT	# check collision of player positions
	beq $t9, $s4, PLAYER_HIT
	
	addi $t9, $s0, 256
	beq $t9, $s3, PLAYER_HIT	# check collision of player positions
	beq $t9, $s4, PLAYER_HIT
	
	addi $t9, $s0, 260
	beq $t9, $s3, PLAYER_HIT	# check collision of player positions
	beq $t9, $s4, PLAYER_HIT
	
	addi $t7, $s0, -4		# check collision one pixel to the top left
	beq $t7, $s3, PLAYER_HIT
	beq $t7, $s4, PLAYER_HIT
	
	addi $t7, $s0, 8		# check collision one pixel to the top right
	beq $t7, $s3, PLAYER_HIT
	beq $t7, $s4, PLAYER_HIT
	
	addi $t8, $s0, 252		# check collision one pixel to the bottom left
	beq $t8, $s3, PLAYER_HIT
	beq $t8, $t4, PLAYER_HIT
	
	addi $t8, $s0, 264		# check collision one pixel to the bottom right
	beq $t8, $s3, PLAYER_HIT
	beq $t8, $t4, PLAYER_HIT
	
	j RETURN_TO_MAIN
	
# ----- Check if player touches the obstacle ------ #
OBSTACLE_CHECK:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	addi $t3, $s0, 512		# check bottom left collision
	addi $t4, $s0, 516		# check bottom right collision
	addi $t5, $s0, -4		# check top left collision
	addi $t6, $s0, 12		# check top right collision
	addi $t7, $s0, 252		# check bottom left
	addi $t8, $s0, 268		# check bottom right
	
	li $t9, OBSTACLE_BOUNDARY
	
OBSTACLE_BOUNDARY_CHECK:
	beq $t9, 0x10009578, NEXT_ROW_OBSTACLE
	beq $t9, 0x10009678, NEXT_ROW_OBSTACLE
	beq $t9, 0x10009778, RETURN_TO_MAIN
	
	beq $t9, $t3, PLAYER_HIT
	beq $t9, $t4, PLAYER_HIT
	beq $t9, $t5, PLAYER_HIT
	beq $t9, $t6, PLAYER_HIT
	beq $t9, $t7, PLAYER_HIT
	beq $t9, $t8, PLAYER_HIT
	
	addi $t9, $t9, 4
	j OBSTACLE_BOUNDARY_CHECK
	
NEXT_ROW_OBSTACLE:
	addi $t9, $t9, 240
	j OBSTACLE_BOUNDARY_CHECK
	
# ----- The player collides with object, check health condition and decrease number of hearts ------ #
PLAYER_HIT:
	addi $s2, $s2, -1	# decrease 1 health for player
	
	# Checks the heart and removes a heart if conditions met
	beq $s2, 2, JUMPTO_CLEAR_HEART1		# the player has 2 hearts left
	beq $s2, 1, JUMPTO_CLEAR_HEART2		# the player has 1 heart left
	beq $s2, 0, JUMPTO_CLEAR_HEART3		# the player has 0 hearts left
	
	j RETURN_TO_MAIN
	
JUMPTO_CLEAR_HEART1:
	jal CLEAR_HEART1
	j RETURN_TO_MAIN
	
JUMPTO_CLEAR_HEART2:
	jal CLEAR_HEART2
	j RETURN_TO_MAIN
	
JUMPTO_CLEAR_HEART3:
	jal CLEAR_HEART3
	j DRAW_GAME_OVER
	
# ---- Clear the first heart ----- #
CLEAR_HEART1:
	li $v0, 32
	li $a0, 1000	# wait for 1 second after decreasing health
	syscall
	
	li $t5, SKY_COL
	li $t3, HEART1
	sw $t5, 4($t3)
	sw $t5, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t5, 0($t3)
	sw $t5, 4($t3)
	sw $t5, 8($t3)
	sw $t5, 12($t3)
	sw $t5, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t5, 0($t3)
	sw $t5, 4($t3)
	sw $t5, 8($t3)
	sw $t5, 12($t3)
	sw $t5, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t5, 4($t3)
	sw $t5, 8($t3)
	sw $t5, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t5, 8($t3)
	
	jr $ra

# ------ Clear the second heart ------ #	
CLEAR_HEART2:
	li $v0, 32
	li $a0, 1000	# wait for 1 second after decreasing health
	syscall
	
	li $t6, SKY_COL
	li $t3, HEART2
	sw $t6, 4($t3)
	sw $t6, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t6, 0($t3)
	sw $t6, 4($t3)
	sw $t6, 8($t3)
	sw $t6, 12($t3)
	sw $t6, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t6, 0($t3)
	sw $t6, 4($t3)
	sw $t6, 8($t3)
	sw $t6, 12($t3)
	sw $t6, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t6, 4($t3)
	sw $t6, 8($t3)
	sw $t6, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t6, 8($t3)
	
	jr $ra

# ------- Clear the last heart -------- #
CLEAR_HEART3:
	li $v0, 32
	li $a0, 1000	# wait for 1 second after decreasing health
	syscall
	
	li $t7, SKY_COL
	li $t3, HEART3
	sw $t7, 4($t3)
	sw $t7, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t7, 0($t3)
	sw $t7, 4($t3)
	sw $t7, 8($t3)
	sw $t7, 12($t3)
	sw $t7, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t7, 0($t3)
	sw $t7, 4($t3)
	sw $t7, 8($t3)
	sw $t7, 12($t3)
	sw $t7, 16($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t7, 4($t3)
	sw $t7, 8($t3)
	sw $t7, 12($t3)
	addi $t3, $t3, NEXT_ROW_OFFSET	# jump to next row
	sw $t7, 8($t3)
	
	jr $ra

# ----- Check if person touches coin ----- #	
COIN_CHECK:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	addi $t5, $s0, -12	# $t5: pixel to the left of player
	
	lw $t6, 0($t5)		# $t6: color of pixel
	beq $t6, YELLOW_COL, CLEAR_COIN

	j RETURN_TO_MAIN
	
# ------ Clear coin locations ------ #
CLEAR_COIN:
	la $a0, COIN_2
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, COIN
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $t7, COIN_PICKUP	# change the COIN_PICKUP value to 1
	li $t8, 1
	sw $t8, 0($t7)
	
	j RETURN_TO_MAIN
	
# ----- Check if person touches key ----- #
KEY_CHECK:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $t8, KEY_PICKUP	# load address of KEY_PICKUP value
	lw $t7, 0($t8)		# $t7: temporarily stores pickup value for future comparison
	
	addi $t5, $s0, 12	# $t5: pixel to the right of player
	lw $t6, 0($t5)		# $t6: color of pixel
	beq $t6, YELLOW_COL, CLEAR_KEY
	beq $t7, 1, DOOR_CHECK
	
	j RETURN_TO_MAIN
	
# ------ Clear key position ----- #
CLEAR_KEY:
	la $a0, KEY_2
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	la $a0, KEY
	li $a1, BACKGROUND_COL
	jal DRAW_KEY_COIN
	
	li $t9, 1		# set KEY_PICKUP value to 1
	sw $t9, 0($t8)
	
# ------ Set door position
SET_DOOR:
	li $t1, DOOR_ADDRESS
	li $t2, BLACK_COL
	li $t3, GREY_COL
	sw $t2, 0($t1)
	sw $t2, 4($t1)
	sw $t2, 8($t1)
	sw $t2, 12($t1)
	sw $t2, -256($t1)
	sw $t2, -252($t1)
	sw $t2, -248($t1)
	sw $t3, -244($t1)
	sw $t2, -512($t1)
	sw $t2, -508($t1)
	sw $t2, -504($t1)
	sw $t3, -500($t1)
	sw $t2, -768($t1)
	sw $t2, -764($t1)
	sw $t2, -760($t1)
	sw $t3, -756($t1)
	sw $t2, -1024($t1)
	sw $t2, -1020($t1)
	sw $t2, -1016($t1)
	sw $t2, -1012($t1)
	sw $t2, -1280($t1)
	sw $t2, -1276($t1)
	sw $t2, -1272($t1)
	sw $t2, -1268($t1)
	
# ----- Check if person reaches door ----- #
DOOR_CHECK:
	addi $t5, $s0, 8
	lw $t6, 0($t5)
	beq $t6, BLACK_COL, PICKEDUP_COIN
	addi $t5, $s0, 12
	lw $t6, 0($t5)
	beq $t6, BLACK_COL, PICKEDUP_COIN
	j RETURN_TO_MAIN
	
PICKEDUP_COIN:
	la $t3, COIN_PICKUP
	lw $t4, 0($t3)
	beq $t4, 1, DRAW_YOU_WIN

	j RETURN_TO_MAIN
	
# ----- All use function to return to MAIN_LOOP ----- #
RETURN_TO_MAIN:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
# ------ Function to Draw You Win Screen ------- #
DRAW_YOU_WIN:
	li $v0, 32
	li $a0, SLEEP_TIME		# sleep for some time
	syscall
	
	jal CLEAR_SCREEN
	li $t0, 0x10009538		# $t0 = starting position to draw YOU WIN
	li $t1, 0x0000ff00		# $t1 = green color
	
	# draw "YOU WIN"
	sw $t1, 0($t0)
	sw $t1, 16($t0)
	sw $t1, 28($t0)
	sw $t1, 32($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 96($t0)
	sw $t1, 104($t0)
	sw $t1, 108($t0)
	sw $t1, 112($t0)
	sw $t1, 116($t0)
	sw $t1, 120($t0)
	sw $t1, 128($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 16($t0)
	sw $t1, 24($t0)
	sw $t1, 36($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 96($t0)
	sw $t1, 112($t0)
	sw $t1, 128($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 16($t0)
	sw $t1, 24($t0)
	sw $t1, 36($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 96($t0)
	sw $t1, 112($t0)
	sw $t1, 128($t0)
	sw $t1, 132($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 4($t0)
	sw $t1, 12($t0)
	sw $t1, 24($t0)
	sw $t1, 36($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 88($t0)
	sw $t1, 96($t0)
	sw $t1, 112($t0)
	sw $t1, 128($t0)
	sw $t1, 136($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 8($t0)
	sw $t1, 24($t0)
	sw $t1, 36($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 88($t0)
	sw $t1, 96($t0)
	sw $t1, 112($t0)
	sw $t1, 128($t0)
	sw $t1, 140($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 8($t0)
	sw $t1, 24($t0)
	sw $t1, 36($t0)
	sw $t1, 44($t0)
	sw $t1, 60($t0)
	sw $t1, 80($t0)
	sw $t1, 84($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	sw $t1, 112($t0)
	sw $t1, 128($t0)
	sw $t1, 144($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 8($t0)
	sw $t1, 28($t0)
	sw $t1, 32($t0)
	sw $t1, 48($t0)
	sw $t1, 52($t0)
	sw $t1, 56($t0)
	sw $t1, 80($t0)
	sw $t1, 96($t0)
	sw $t1, 104($t0)
	sw $t1, 108($t0)
	sw $t1, 112($t0)
	sw $t1, 116($t0)
	sw $t1, 120($t0)
	sw $t1, 128($t0)
	sw $t1, 144($t0)
	
	j END
	
# ------ Function to Draw Game Over Screen ------ #
DRAW_GAME_OVER:
	li $v0, 32
	li $a0, SLEEP_TIME		# sleep for some time
	syscall
	
	jal CLEAR_SCREEN
	li $t0, 0x1000964c		# $t0 = starting position to draw GAME OVER
	li $t1, 0x00ff0000		# $t1 = red color
	
	# draw "GAME"
	sw $t1, 4($t0)
	sw $t1, 8($t0)
	sw $t1, 12($t0)
	sw $t1, 16($t0)
	sw $t1, 20($t0)
	sw $t1, 32($t0)
	sw $t1, 36($t0)
	sw $t1, 40($t0)
	sw $t1, 44($t0)
	sw $t1, 56($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	sw $t1, 88($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	sw $t1, 100($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 60($t0)
	sw $t1, 72($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 64($t0)
	sw $t1, 68($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 12($t0)
	sw $t1, 16($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 32($t0)
	sw $t1, 36($t0)
	sw $t1, 40($t0)
	sw $t1, 44($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	sw $t1, 88($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 4($t0)
	sw $t1, 8($t0)
	sw $t1, 12($t0)
	sw $t1, 16($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	sw $t1, 88($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	sw $t1, 100($t0)
	
	addi $t0, $t0, NEXT_ROW_OFFSET
	addi $t0, $t0, NEXT_ROW_OFFSET
	
	# draw "OVER"
	sw $t1, 4($t0)
	sw $t1, 8($t0)
	sw $t1, 12($t0)
	sw $t1, 16($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 60($t0)
	sw $t1, 64($t0)
	sw $t1, 68($t0)
	sw $t1, 72($t0)
	sw $t1, 76($t0)
	sw $t1, 84($t0)
	sw $t1, 88($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 84($t0)
	sw $t1, 100($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 84($t0)
	sw $t1, 100($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 60($t0)
	sw $t1, 64($t0)
	sw $t1, 68($t0)
	sw $t1, 72($t0)
	sw $t1, 84($t0)
	sw $t1, 88($t0)
	sw $t1, 92($t0)
	sw $t1, 96($t0)
	sw $t1, 100($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 28($t0)
	sw $t1, 48($t0)
	sw $t1, 56($t0)
	sw $t1, 84($t0)
	sw $t1, 92($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 0($t0)
	sw $t1, 20($t0)
	sw $t1, 32($t0)
	sw $t1, 44($t0)
	sw $t1, 56($t0)
	sw $t1, 84($t0)
	sw $t1, 96($t0)
	addi $t0, $t0, NEXT_ROW_OFFSET
	sw $t1, 4($t0)
	sw $t1, 8($t0)
	sw $t1, 12($t0)
	sw $t1, 16($t0)
	sw $t1, 36($t0)
	sw $t1, 40($t0)
	sw $t1, 56($t0)
	sw $t1, 60($t0)
	sw $t1, 64($t0)
	sw $t1, 68($t0)
	sw $t1, 72($t0)

# ------ Terminate the program ------ #
END:
	li $v0, 10
	syscall
